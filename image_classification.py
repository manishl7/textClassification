# -*- coding: utf-8 -*-
"""Image_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OjPPQdH8Vma5NFQUIc4l4ZmcJ0FhcGNf
"""

# keras
# tensorflow

# Importing the packages
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

# initialising the CNN,Convolution,Pooling
classifier = Sequential()

# Step 1 - Convolution
classifier.add(Conv2D(32, (3, 3), 
                      input_shape = (64, 64, 3), activation = 'relu'))
# Step 2 - Pooling
classifier.add(MaxPooling2D(pool_size = (2, 2)))



# Adding a second convolutional layer
classifier.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3),
                      activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))

# Step 3 - Flattening
classifier.add(Flatten())

# Step 4 - Full connection
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 64, activation = 'relu'))
classifier.add(Dense(units = 32, activation = 'relu'))
classifier.add(Dense(units = 1, activation = 'sigmoid'))

# step5
# Compiling the CNN
classifier.compile(optimizer = 'adam',
                   loss = 'binary_crossentropy', metrics = ['accuracy'])
# adam = adaptive learning rate optimization algorithm
#  it computes individual learning rates for different parameters

# Part 2 - Fitting the CNN to the images
# This is also called Image Augmentation
# Preprocessing the image to prevent overfitting(good result in the training set but 
# poor result in test set)

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('dataset/training_set',
                                                 target_size = (64, 64),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

# bach size =  number of training examples utilized in one iteration
test_set = test_datagen.flow_from_directory('dataset/test_set',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            class_mode = 'binary')

classifier.fit_generator(training_set,
                         steps_per_epoch =8000 , #no of training image
                         epochs = 1,
                         validation_data = test_set,
                         validation_steps = 2000) #no of test image
classifier.save("dataset/cats_vs_dogs_V1.h5")

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('dataset/single_prediction/cat_or_dog_2.jpg',
                                     target_size = (64,64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image,axis = 0)
result = classifier.predict(test_image)


if result[0][0]==1:
    prediction = 'dog'
    print(prediction)
else:
    prediction='cat'
    print(prediction)

import numpy as np
import keras
from keras.preprocessing import image
from keras.models import load_model
classifier = load_model('dataset/cats_vs_dogs_V1.h5')
test_image = image.load_img('dataset/single_prediction/cat_or_dog_2.jpg',
                                     target_size = (64,64))


test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image,axis = 0)
result = classifier.predict(test_image)


if result[0][0]==1:
    prediction = 'dog'
    print(prediction)
else:
    prediction='cat'
    print(prediction)

